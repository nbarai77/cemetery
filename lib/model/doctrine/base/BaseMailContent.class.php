<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MailContent', 'doctrine');

/**
 * BaseMailContent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $country_id
 * @property integer $cem_cemetery_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property string $subject
 * @property string $content
 * @property string $content_type
 * @property string $type
 * @property Country $Country
 * @property CemCemetery $CemCemetery
 * @property Doctrine_Collection $IntermentBookingFive
 * 
 * @method integer             getId()                   Returns the current record's "id" value
 * @method integer             getCountryId()            Returns the current record's "country_id" value
 * @method integer             getCemCemeteryId()        Returns the current record's "cem_cemetery_id" value
 * @method timestamp           getCreatedAt()            Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()            Returns the current record's "updated_at" value
 * @method string              getSubject()              Returns the current record's "subject" value
 * @method string              getContent()              Returns the current record's "content" value
 * @method string              getContentType()          Returns the current record's "content_type" value
 * @method string              getType()                 Returns the current record's "type" value
 * @method Country             getCountry()              Returns the current record's "Country" value
 * @method CemCemetery         getCemCemetery()          Returns the current record's "CemCemetery" value
 * @method Doctrine_Collection getIntermentBookingFive() Returns the current record's "IntermentBookingFive" collection
 * @method MailContent         setId()                   Sets the current record's "id" value
 * @method MailContent         setCountryId()            Sets the current record's "country_id" value
 * @method MailContent         setCemCemeteryId()        Sets the current record's "cem_cemetery_id" value
 * @method MailContent         setCreatedAt()            Sets the current record's "created_at" value
 * @method MailContent         setUpdatedAt()            Sets the current record's "updated_at" value
 * @method MailContent         setSubject()              Sets the current record's "subject" value
 * @method MailContent         setContent()              Sets the current record's "content" value
 * @method MailContent         setContentType()          Sets the current record's "content_type" value
 * @method MailContent         setType()                 Sets the current record's "type" value
 * @method MailContent         setCountry()              Sets the current record's "Country" value
 * @method MailContent         setCemCemetery()          Sets the current record's "CemCemetery" value
 * @method MailContent         setIntermentBookingFive() Sets the current record's "IntermentBookingFive" collection
 * 
 * @package    cemetery
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMailContent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mail_content');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('country_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('cem_cemetery_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('subject', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('content', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('content_type', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'letter',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id'));

        $this->hasOne('CemCemetery', array(
             'local' => 'cem_cemetery_id',
             'foreign' => 'id'));

        $this->hasMany('IntermentBookingFive', array(
             'local' => 'id',
             'foreign' => 'mail_content_id'));
    }
}