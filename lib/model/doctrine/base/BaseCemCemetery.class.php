<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CemCemetery', 'doctrine');

/**
 * BaseCemCemetery
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $country_id
 * @property string $name
 * @property string $description
 * @property string $url
 * @property integer $is_enabled
 * @property string $address
 * @property string $suburb_town
 * @property string $state
 * @property string $postcode
 * @property string $area_code
 * @property string $phone
 * @property string $fax_area_code
 * @property string $fax
 * @property string $email
 * @property string $gmap_code
 * @property string $cemetery_map_path
 * @property string $latitude
 * @property string $longitude
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Country $Country
 * @property Doctrine_Collection $ArArea
 * @property Doctrine_Collection $ArGrave
 * @property Doctrine_Collection $ArGraveMaintenance
 * @property Doctrine_Collection $ArPlot
 * @property Doctrine_Collection $ArRow
 * @property Doctrine_Collection $ArSection
 * @property Doctrine_Collection $CemCemeteryDocs
 * @property Doctrine_Collection $CemCemeteryFndirector
 * @property Doctrine_Collection $CemCemeteryStonemason
 * @property Doctrine_Collection $CemChapel
 * @property Doctrine_Collection $CemRoom
 * @property Doctrine_Collection $CemStonemasonDocs
 * @property Doctrine_Collection $DepartmentDelegation
 * @property Doctrine_Collection $FacilityBooking
 * @property Doctrine_Collection $FndFndirector
 * @property Doctrine_Collection $Grantee
 * @property Doctrine_Collection $GranteeDetails
 * @property Doctrine_Collection $GraveLink
 * @property Doctrine_Collection $IntermentBooking
 * @property Doctrine_Collection $MailContent
 * @property Doctrine_Collection $UserCemetery
 * @property Doctrine_Collection $Workflow
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method integer             getCountryId()             Returns the current record's "country_id" value
 * @method string              getName()                  Returns the current record's "name" value
 * @method string              getDescription()           Returns the current record's "description" value
 * @method string              getUrl()                   Returns the current record's "url" value
 * @method integer             getIsEnabled()             Returns the current record's "is_enabled" value
 * @method string              getAddress()               Returns the current record's "address" value
 * @method string              getSuburbTown()            Returns the current record's "suburb_town" value
 * @method string              getState()                 Returns the current record's "state" value
 * @method string              getPostcode()              Returns the current record's "postcode" value
 * @method string              getAreaCode()              Returns the current record's "area_code" value
 * @method string              getPhone()                 Returns the current record's "phone" value
 * @method string              getFaxAreaCode()           Returns the current record's "fax_area_code" value
 * @method string              getFax()                   Returns the current record's "fax" value
 * @method string              getEmail()                 Returns the current record's "email" value
 * @method string              getGmapCode()              Returns the current record's "gmap_code" value
 * @method string              getCemeteryMapPath()       Returns the current record's "cemetery_map_path" value
 * @method string              getLatitude()              Returns the current record's "latitude" value
 * @method string              getLongitude()             Returns the current record's "longitude" value
 * @method timestamp           getCreatedAt()             Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()             Returns the current record's "updated_at" value
 * @method Country             getCountry()               Returns the current record's "Country" value
 * @method Doctrine_Collection getArArea()                Returns the current record's "ArArea" collection
 * @method Doctrine_Collection getArGrave()               Returns the current record's "ArGrave" collection
 * @method Doctrine_Collection getArGraveMaintenance()    Returns the current record's "ArGraveMaintenance" collection
 * @method Doctrine_Collection getArPlot()                Returns the current record's "ArPlot" collection
 * @method Doctrine_Collection getArRow()                 Returns the current record's "ArRow" collection
 * @method Doctrine_Collection getArSection()             Returns the current record's "ArSection" collection
 * @method Doctrine_Collection getCemCemeteryDocs()       Returns the current record's "CemCemeteryDocs" collection
 * @method Doctrine_Collection getCemCemeteryFndirector() Returns the current record's "CemCemeteryFndirector" collection
 * @method Doctrine_Collection getCemCemeteryStonemason() Returns the current record's "CemCemeteryStonemason" collection
 * @method Doctrine_Collection getCemChapel()             Returns the current record's "CemChapel" collection
 * @method Doctrine_Collection getCemRoom()               Returns the current record's "CemRoom" collection
 * @method Doctrine_Collection getCemStonemasonDocs()     Returns the current record's "CemStonemasonDocs" collection
 * @method Doctrine_Collection getDepartmentDelegation()  Returns the current record's "DepartmentDelegation" collection
 * @method Doctrine_Collection getFacilityBooking()       Returns the current record's "FacilityBooking" collection
 * @method Doctrine_Collection getFndFndirector()         Returns the current record's "FndFndirector" collection
 * @method Doctrine_Collection getGrantee()               Returns the current record's "Grantee" collection
 * @method Doctrine_Collection getGranteeDetails()        Returns the current record's "GranteeDetails" collection
 * @method Doctrine_Collection getGraveLink()             Returns the current record's "GraveLink" collection
 * @method Doctrine_Collection getIntermentBooking()      Returns the current record's "IntermentBooking" collection
 * @method Doctrine_Collection getMailContent()           Returns the current record's "MailContent" collection
 * @method Doctrine_Collection getUserCemetery()          Returns the current record's "UserCemetery" collection
 * @method Doctrine_Collection getWorkflow()              Returns the current record's "Workflow" collection
 * @method CemCemetery         setId()                    Sets the current record's "id" value
 * @method CemCemetery         setCountryId()             Sets the current record's "country_id" value
 * @method CemCemetery         setName()                  Sets the current record's "name" value
 * @method CemCemetery         setDescription()           Sets the current record's "description" value
 * @method CemCemetery         setUrl()                   Sets the current record's "url" value
 * @method CemCemetery         setIsEnabled()             Sets the current record's "is_enabled" value
 * @method CemCemetery         setAddress()               Sets the current record's "address" value
 * @method CemCemetery         setSuburbTown()            Sets the current record's "suburb_town" value
 * @method CemCemetery         setState()                 Sets the current record's "state" value
 * @method CemCemetery         setPostcode()              Sets the current record's "postcode" value
 * @method CemCemetery         setAreaCode()              Sets the current record's "area_code" value
 * @method CemCemetery         setPhone()                 Sets the current record's "phone" value
 * @method CemCemetery         setFaxAreaCode()           Sets the current record's "fax_area_code" value
 * @method CemCemetery         setFax()                   Sets the current record's "fax" value
 * @method CemCemetery         setEmail()                 Sets the current record's "email" value
 * @method CemCemetery         setGmapCode()              Sets the current record's "gmap_code" value
 * @method CemCemetery         setCemeteryMapPath()       Sets the current record's "cemetery_map_path" value
 * @method CemCemetery         setLatitude()              Sets the current record's "latitude" value
 * @method CemCemetery         setLongitude()             Sets the current record's "longitude" value
 * @method CemCemetery         setCreatedAt()             Sets the current record's "created_at" value
 * @method CemCemetery         setUpdatedAt()             Sets the current record's "updated_at" value
 * @method CemCemetery         setCountry()               Sets the current record's "Country" value
 * @method CemCemetery         setArArea()                Sets the current record's "ArArea" collection
 * @method CemCemetery         setArGrave()               Sets the current record's "ArGrave" collection
 * @method CemCemetery         setArGraveMaintenance()    Sets the current record's "ArGraveMaintenance" collection
 * @method CemCemetery         setArPlot()                Sets the current record's "ArPlot" collection
 * @method CemCemetery         setArRow()                 Sets the current record's "ArRow" collection
 * @method CemCemetery         setArSection()             Sets the current record's "ArSection" collection
 * @method CemCemetery         setCemCemeteryDocs()       Sets the current record's "CemCemeteryDocs" collection
 * @method CemCemetery         setCemCemeteryFndirector() Sets the current record's "CemCemeteryFndirector" collection
 * @method CemCemetery         setCemCemeteryStonemason() Sets the current record's "CemCemeteryStonemason" collection
 * @method CemCemetery         setCemChapel()             Sets the current record's "CemChapel" collection
 * @method CemCemetery         setCemRoom()               Sets the current record's "CemRoom" collection
 * @method CemCemetery         setCemStonemasonDocs()     Sets the current record's "CemStonemasonDocs" collection
 * @method CemCemetery         setDepartmentDelegation()  Sets the current record's "DepartmentDelegation" collection
 * @method CemCemetery         setFacilityBooking()       Sets the current record's "FacilityBooking" collection
 * @method CemCemetery         setFndFndirector()         Sets the current record's "FndFndirector" collection
 * @method CemCemetery         setGrantee()               Sets the current record's "Grantee" collection
 * @method CemCemetery         setGranteeDetails()        Sets the current record's "GranteeDetails" collection
 * @method CemCemetery         setGraveLink()             Sets the current record's "GraveLink" collection
 * @method CemCemetery         setIntermentBooking()      Sets the current record's "IntermentBooking" collection
 * @method CemCemetery         setMailContent()           Sets the current record's "MailContent" collection
 * @method CemCemetery         setUserCemetery()          Sets the current record's "UserCemetery" collection
 * @method CemCemetery         setWorkflow()              Sets the current record's "Workflow" collection
 * 
 * @package    cemetery
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCemCemetery extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cem_cemetery');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('country_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('is_enabled', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('suburb_town', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('state', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('postcode', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('area_code', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('fax_area_code', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('fax', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('gmap_code', 'string', 2000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2000,
             ));
        $this->hasColumn('cemetery_map_path', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('latitude', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('longitude', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id'));

        $this->hasMany('ArArea', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('ArGrave', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('ArGraveMaintenance', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('ArPlot', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('ArRow', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('ArSection', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('CemCemeteryDocs', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('CemCemeteryFndirector', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('CemCemeteryStonemason', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('CemChapel', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('CemRoom', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('CemStonemasonDocs', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('DepartmentDelegation', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('FacilityBooking', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('FndFndirector', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('Grantee', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('GranteeDetails', array(
             'local' => 'id',
             'foreign' => 'cem_id'));

        $this->hasMany('GraveLink', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('IntermentBooking', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('MailContent', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('UserCemetery', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));

        $this->hasMany('Workflow', array(
             'local' => 'id',
             'foreign' => 'cem_cemetery_id'));
    }
}