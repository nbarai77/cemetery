<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CemStonemason', 'doctrine');

/**
 * BaseCemStonemason
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property integer $work_type_stone_mason_id
 * @property string $bond
 * @property string $annual_license_fee
 * @property string $abn_acn_number
 * @property string $contractors_license_number
 * @property string $general_induction_cards
 * @property string $operator_licenses
 * @property string $list_current_employees
 * @property string $list_contractors
 * @property Doctrine_Collection $CemCemeteryStonemason
 * 
 * @method integer             getId()                         Returns the current record's "id" value
 * @method integer             getUserId()                     Returns the current record's "user_id" value
 * @method integer             getWorkTypeStoneMasonId()       Returns the current record's "work_type_stone_mason_id" value
 * @method string              getBond()                       Returns the current record's "bond" value
 * @method string              getAnnualLicenseFee()           Returns the current record's "annual_license_fee" value
 * @method string              getAbnAcnNumber()               Returns the current record's "abn_acn_number" value
 * @method string              getContractorsLicenseNumber()   Returns the current record's "contractors_license_number" value
 * @method string              getGeneralInductionCards()      Returns the current record's "general_induction_cards" value
 * @method string              getOperatorLicenses()           Returns the current record's "operator_licenses" value
 * @method string              getListCurrentEmployees()       Returns the current record's "list_current_employees" value
 * @method string              getListContractors()            Returns the current record's "list_contractors" value
 * @method Doctrine_Collection getCemCemeteryStonemason()      Returns the current record's "CemCemeteryStonemason" collection
 * @method CemStonemason       setId()                         Sets the current record's "id" value
 * @method CemStonemason       setUserId()                     Sets the current record's "user_id" value
 * @method CemStonemason       setWorkTypeStoneMasonId()       Sets the current record's "work_type_stone_mason_id" value
 * @method CemStonemason       setBond()                       Sets the current record's "bond" value
 * @method CemStonemason       setAnnualLicenseFee()           Sets the current record's "annual_license_fee" value
 * @method CemStonemason       setAbnAcnNumber()               Sets the current record's "abn_acn_number" value
 * @method CemStonemason       setContractorsLicenseNumber()   Sets the current record's "contractors_license_number" value
 * @method CemStonemason       setGeneralInductionCards()      Sets the current record's "general_induction_cards" value
 * @method CemStonemason       setOperatorLicenses()           Sets the current record's "operator_licenses" value
 * @method CemStonemason       setListCurrentEmployees()       Sets the current record's "list_current_employees" value
 * @method CemStonemason       setListContractors()            Sets the current record's "list_contractors" value
 * @method CemStonemason       setCemCemeteryStonemason()      Sets the current record's "CemCemeteryStonemason" collection
 * 
 * @package    cemetery
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCemStonemason extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cem_stonemason');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('work_type_stone_mason_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('bond', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('annual_license_fee', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('abn_acn_number', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('contractors_license_number', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('general_induction_cards', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('operator_licenses', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('list_current_employees', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('list_contractors', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('CemCemeteryStonemason', array(
             'local' => 'id',
             'foreign' => 'cms_stonemason_id'));
    }
}